class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int>ans;
        deque<int>dq;

        //processing the first window (first step)
        for(int i =0 ;i<k;i++){
            int element  = nums[i];

            while(!dq.empty() && element > nums[dq.back()]){
                dq.pop_back();
            }

            dq.push_back(i);
        }

        //remaining window process
        for(int i = k;i<nums.size();i++){
            ans.push_back(nums[dq.front()]);
            //remove out of range elemnt
            if(!dq.empty() && i - dq.front() >=k){
                dq.pop_front();
            }

            //pop chote elements
            int element  = nums[i];
            while(!dq.empty() && element > nums[dq.back()]){
                dq.pop_back();
            }
            dq.push_back(i);
        }
        //last window ans store kro
        ans.push_back(nums[dq.front()]);
        return ans;
        
    }
};
